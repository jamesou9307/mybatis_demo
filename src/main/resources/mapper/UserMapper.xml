<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis . org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.james.mybatis.mapper.UserMapper">

    <resultMap id="userMap" type="com.james.mybatis.entity.SysUser">
       <id property="id" column="id"/>
        <result property="userName" column="user_name"/>
        <result property="userPassword" column="user_password"/>
        <result property="userEmail" column="user_email"/>
        <result property="userInfo" column="user_info"/>
        <result property="headImg" column="head_img" jdbcType="BLOB"/>
        <result property="createTime" column="create_time" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!--resultMpa标签支持继承-->
    <resultMap id="userRoleMap" extends="userMap" type="com.james.mybatis.entity.SysUser">
        <association property="sysRole" columnPrefix="role_"
                     resultMap="com.james.mybatis.mapper.RoleMapper.roleMap"
        ></association>
    </resultMap>

    <!--association标签的嵌套查询, 通过多次查询组合成我们想要的结果，
    select 属性为其他的select id column属性为配置嵌套查询需要的参数,用逗号分隔开-->
    <resultMap id="userRoleMap2" extends="userMap" type="com.james.mybatis.entity.SysUser">
        <association property="sysRole" select="com.james.mybatis.mapper.RoleMapper.selectById"
                     column="{id=role_id}">
        </association>
    </resultMap>

    <select id="selectById" resultMap="userMap">
        select a.* from mybatis_01.sys_user a where a.id=#{id}
    </select>

    <select id="selectAll" resultMap="userMap">
        select
        a.id ,
        a.user_name ,
        a.user_password ,
        a.user_email,
        a.user_info,
        a.head_img,
        a.create_time
        from mybatis_01.sys_user a
    </select>

    <select id="selectRoleByUserId" resultType="com.james.mybatis.entity.SysRole">
        select b.id id,b.role_name roleName,b.enabled enabled,b.create_by createBy,b.create_time createTime
                from sys_user a,sys_role b,sys_user_role c
                where a.id=c.user_id
                and b.id=c.role_id
                and a.id=#{id}
    </select>

    <select id="selectRoleByUserIdAndEnabled" resultType="com.james.mybatis.entity.SysRole">
        select
        b.id,b.role_name,b.enabled,b.create_by,b.create_time
        from sys_user a,sys_role b,sys_user_role c
        where a.id=c.user_id
        and b.id=c.role_id
        and a.id=#{userId}  and b.enabled=#{enabled};
    </select>

    <!--动态sql语句，根据输入的内容是否为空，动态拼接sql语句,当只输入用户名时，按照用户名模糊查询,只输入用户邮箱时，按照邮箱精确查询-->
    <select id="selectByUser" resultMap="userMap">
       select
          a.id,
          a.user_name userName,
          a.user_password userPassword,
          a.user_email userEmail,
          a.user_info userInfo,
          a.head_img headImg,
          a.create_time createTime
          from sys_user a
          <where>
          <if test="userName!=null and userName!='' ">
              <if test="_databaseId=='mysql'">
                  and a.user_name like concat('%',#{userName},'%')
              </if>
              /*数据库是oracle的时候的like语句*/
              <if test="_databaseId=='oracle'">
                  and a.user_name like '%'||#{userName}||'%'
              </if>
          </if>
          <if test="userEmail!=null and userEmail!=''">
              and a.user_email=#{userEmail}
          </if>
          </where>
    </select>

    <!--insert方法-->
    <insert id="insert">
        insert into sys_user(
        id,user_name,user_password,user_email,user_info,head_img,create_time
        )values (
        #{id},#{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
        )
    </insert>

    <insert id="insert1" keyProperty="id" useGeneratedKeys="true">
        insert into sys_user(
        user_name,user_password,user_email,user_info,head_img,create_time
        )values (
        #{userName},#{userPassword},#{userEmail},#{userInfo},#{headImg,jdbcType=BLOB},#{createTime,jdbcType=TIMESTAMP}
        )
    </insert>
    
    <update id="updateById">
        update sys_user
        set user_name=#{userName},
        user_password=#{userPassword},
        user_email=#{userEmail},
        user_info=#{userInfo},
        head_img=#{headImg},
        create_time=#{createTime,jdbcType=TIMESTAMP}
        where id=#{id}
    </update>

    <!--foreach标签的使用，可以实现in子查询-->
    <select id="selectByList" resultMap="userMap">
               select
          a.id,
          a.user_name userName,
          a.user_password userPassword,
          a.user_email userEmail,
          a.user_info userInfo,
          a.head_img headImg,
          a.create_time createTime
          from sys_user a
          where
          a.id in
        <foreach collection="list" open="(" close=")" separator="," item="id" index="i">
            #{id}
        </foreach>
    </select>

    <!--通过sysRole.xxx绑定到sysUser的sysRole对象的对应属性上-->
    <select id="selectUserAndRoleById" resultType="com.james.mybatis.entity.SysUser">
        select
        a.id,
        a.user_name userName,
        a.user_password userPassword,
        a.user_email userEmail,
        a.user_info userInfo,
        a.head_img headImg,
        a.create_time createTime,
        c.id "sysRole.id",
        c.role_name "sysRole.roleName",
        c.enabled "sysRole.enabled",
        c.create_by "sysRole.createBy",
        c.create_time "sysRole.createTime"
        from sys_user a,sys_user_role b, sys_role c
        where a.id=b.user_id
        and b.role_id=c.id
        and a.id=#{id}
    </select>

    <select id="selectUserAndRoleById2" resultMap="userRoleMap">
      select
        a.id,
        a.user_name ,
        a.user_password ,
        a.user_email ,
        a.user_info ,
        a.head_img ,
        a.create_time ,
        c.id role_id,
        c.role_name role_role_name,
        c.enabled role_enable,
        c.create_by role_enabled,
        c.create_time role_create_time
        from sys_user a,sys_user_role b, sys_role c
        where a.id=b.user_id
        and b.role_id=c.id
        and a.id=#{id}
    </select>

    <select id="selectUserAndRoleById3" resultMap="userRoleMap2">
      select
        a.id,
        a.user_name ,
        a.user_password ,
        a.user_email ,
        a.user_info ,
        a.head_img ,
        a.create_time ,
        b.role_id
        from sys_user a,sys_user_role b
        where a.id=b.user_id
        and a.id=#{id}
    </select>

</mapper>